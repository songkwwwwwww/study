
;; Function printf (printf, funcdef_no=15, decl_uid=760, cgraph_uid=15, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_RESTRICT
PARM_RESTRICT = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_RESTRICT }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_RESTRICT }
PARM_RESTRICT = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.2500 } (nonlocal, escaped heap)

Flow-insensitive points-to information

__fmt_2(D), points-to vars: { D.2500 } (nonlocal, escaped heap)

printf (const char * restrict __fmt)
{
  int _4;

  <bb 2>:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function main (main, funcdef_no=23, decl_uid=2480, cgraph_uid=23, symbol_order=23)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
i.0_11 = i_1
_12 = i.0_11 + UNKNOWN
j_13 = j_3
j_13 = &NONLOCAL
k_14 = k_5
k_14 = &NONLOCAL
j_2 = j_13
j_2 = j_3
k_4 = k_5
k_4 = k_14
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = j_2
ESCAPED = k_4
_18 = NONLOCAL
_19 = _18
i_16 = i_1
i_16 = &NONLOCAL
i_1 = &NULL
i_1 = i_16
j_3 = &NULL
j_3 = j_2
k_5 = &NULL
k_5 = k_4
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _18
STOREDANYTHING = { }
INTEGER = { ANYTHING }
i.0_11 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as i.0_11
_12 = { NULL NONLOCAL }
j_13 = { NULL NONLOCAL } same as i.0_11
j_3 = { NULL NONLOCAL } same as i.0_11
k_14 = { NULL NONLOCAL } same as i.0_11
k_5 = { NULL NONLOCAL } same as i.0_11
j_2 = { NULL NONLOCAL } same as i.0_11
k_4 = { NULL NONLOCAL } same as i.0_11
__printf_chk = { }
_18 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL } same as _18
i_16 = { NULL NONLOCAL } same as i.0_11


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int D.2503;
  int k;
  int j;
  int i;
  unsigned int i.0_11;
  unsigned int _12;
  int _18;

  <bb 2>:
  goto <bb 7>;

  <bb 3>:
  i.0_11 = (unsigned int) i_1;
  _12 = i.0_11 & 1;
  if (_12 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  j_13 = j_3 + 1;
  goto <bb 6>;

  <bb 5>:
  k_14 = k_5 + 1;

  <bb 6>:
  # j_2 = PHI <j_13(4), j_3(5)>
  # k_4 = PHI <k_5(4), k_14(5)>
  _18 = __printf_chk (1, "j = %d, k = %d\n", j_2, k_4);
  _19 = _18;
  i_16 = i_1 + 1;

  <bb 7>:
  # i_1 = PHI <0(2), i_16(6)>
  # j_3 = PHI <0(2), j_2(6)>
  # k_5 = PHI <0(2), k_4(6)>
  if (i_1 <= 9)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 8>:
  return 0;

}


