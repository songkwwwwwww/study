
;; Function main (main, funcdef_no=23, decl_uid=2480, cgraph_uid=23, symbol_order=23) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
i_18 = i_13
i_18 = &NULL
j_19 = j_2
j_19 = &NULL
k_20 = k_4
k_20 = &NULL
i.0_8 = i_18
_9 = i.0_8 + UNKNOWN
j_10 = j_19
j_10 = &NONLOCAL
k_11 = k_20
k_11 = &NONLOCAL
j_2 = j_10
j_2 = j_19
k_4 = k_20
k_4 = k_11
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = j_2
ESCAPED = k_4
i_13 = i_18
i_13 = &NONLOCAL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
i_18 = { NULL NONLOCAL }
i_13 = { NULL NONLOCAL } same as i_18
j_19 = { NULL NONLOCAL } same as i_18
j_2 = { NULL NONLOCAL } same as i_18
k_20 = { NULL NONLOCAL } same as i_18
k_4 = { NULL NONLOCAL } same as i_18
i.0_8 = { NULL NONLOCAL } same as i_18
_9 = { NULL NONLOCAL }
j_10 = { NULL NONLOCAL } same as i_18
k_11 = { NULL NONLOCAL } same as i_18
__printf_chk = { }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 3, latch 8
;;  depth 1, outer 0
;;  nodes: 3 8 6 4 5
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 3 }
;; 7 succs { 1 }
main ()
{
  int k;
  int j;
  int i;
  unsigned int i.0_8;
  unsigned int _9;

  <bb 2>:

  <bb 3>:
  # i_18 = PHI <i_13(8), 0(2)>
  # j_19 = PHI <j_2(8), 0(2)>
  # k_20 = PHI <k_4(8), 0(2)>
  i.0_8 = (unsigned int) i_18;
  _9 = i.0_8 & 1;
  if (_9 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  j_10 = j_19 + 1;
  goto <bb 6>;

  <bb 5>:
  k_11 = k_20 + 1;

  <bb 6>:
  # j_2 = PHI <j_10(4), j_19(5)>
  # k_4 = PHI <k_20(4), k_11(5)>
  __printf_chk (1, "j = %d, k = %d\n", j_2, k_4);
  i_13 = i_18 + 1;
  if (i_13 != 10)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 8>:
  goto <bb 3>;

  <bb 7>:
  return 0;

}


